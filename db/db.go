// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBeerStmt, err = db.PrepareContext(ctx, createBeer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBeer: %w", err)
	}
	if q.createBreweryStmt, err = db.PrepareContext(ctx, createBrewery); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBrewery: %w", err)
	}
	if q.createTypeStmt, err = db.PrepareContext(ctx, createType); err != nil {
		return nil, fmt.Errorf("error preparing query CreateType: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getUserByTokenStmt, err = db.PrepareContext(ctx, getUserByToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBeerStmt != nil {
		if cerr := q.createBeerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBeerStmt: %w", cerr)
		}
	}
	if q.createBreweryStmt != nil {
		if cerr := q.createBreweryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBreweryStmt: %w", cerr)
		}
	}
	if q.createTypeStmt != nil {
		if cerr := q.createTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTypeStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getUserByTokenStmt != nil {
		if cerr := q.getUserByTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createBeerStmt     *sql.Stmt
	createBreweryStmt  *sql.Stmt
	createTypeStmt     *sql.Stmt
	createUserStmt     *sql.Stmt
	getUserByTokenStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createBeerStmt:     q.createBeerStmt,
		createBreweryStmt:  q.createBreweryStmt,
		createTypeStmt:     q.createTypeStmt,
		createUserStmt:     q.createUserStmt,
		getUserByTokenStmt: q.getUserByTokenStmt,
	}
}
